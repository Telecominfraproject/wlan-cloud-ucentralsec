openapi: 3.0.1
info:
  title: uCentral Security API
  description: A process to manage security logins
  version: 0.0.2
  license:
    name: BSD3
    url: https://github.com/Telecominfraproject/wlan-cloud-ucentralgw/blob/master/LICENSE
  contact:
    name: Arilia Support
    email: ucentralsupport@arilia.com
    url: https://www.ucentral.info/support

servers:
  - url: 'https://localhost:16001/api/v1'

security:
  - bearerAuth: []
  - ApiKeyAuth: []

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  responses:
    NotFound:
      description: The specified resource was not found.
      content:
        application/json:
          schema:
            properties:
              ErrorCode:
                type: integer
              ErrorDetails:
                type: string
              ErrorDescription:
                type: string

    Unauthorized:
      description: The requested does not have sufficient rights to perform the operation.
      content:
        application/json:
          schema:
            properties:
              ErrorCode:
                type: integer
              ErrorDetails:
                type: string
              ErrorDescription:
                type: string

    Success:
      description: The requested operation was performed.
      content:
        application/json:
          schema:
            properties:
              Operation:
                type: string
              Details:
                type: string
              Code:
                type: integer

  schemas:

    WebTokenRequest:
      description: User Id and password.
      type: object
      required:
        - userId
        - password
      properties:
        userId:
          type: string
          default: support@example.com
        password:
          type: string
          default: support
        newPassword:
          type: string
          default: support
        refreshToken:
          type: string
      example:
        userId: support@example.com
        password: support

    WebTokenResult:
      description: Login and Refresh Tokens to be used in subsequent API calls.
      type: object
      properties:
        access_token:
          type: string
        refresh_token:
          type: string
        token_type:
          type: string
        expires_in:
          type: integer
          format: int32
        idle_timeout:
          type: integer
          format: int32
        username:
          type: string
        created:
          type: integer
          format: int64
        userMustChangePassword:
          type: boolean
        errorCode:
          type: integer     # 0 = no error, 1 = passwordAlreadyUsed, 2=invalidPassword
        aclTemplate:
          $ref: '#/components/schemas/WebTokenAclTemplate'

    WebTokenAclTemplate:
      type: object
      properties:
        aclTemplate:
          $ref: '#/components/schemas/AclTemplate'

    ApiKeyCreationRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        expiresOn:
          type: integer
          format: int64
        rights:
          $ref: '#/components/schemas/AclTemplate'

    ApiKeyCreationAnswer:
      type: object
      properties:
        UUID:
          type: string
          format: uuid
        name:
          type: string
        created:
          type: integer
          format: int64
        expiresOn:
          type: integer
          format: int64
        apiKey:
          type: string
        rights:
          $ref: '#/components/schemas/AclTemplate'

    AclTemplate:
      type: object
      properties:
        Read:
          type: boolean
        ReadWrite:
          type: boolean
        ReadWriteCreate:
          type: boolean
        Delete:
          type: boolean
        PortalLogin:
          type: boolean

    SystemEndpoint:
      type: object
      properties:
        type:
          type: string
        id:
          type: integer
        vendor:
          type: string
        uri:
          type: string
          format: uri
        authenticationType:
          type: string

    SystemEndpointList:
      type: object
      properties:
        endpoints:
          type: array
          items:
            $ref: '#/components/schemas/SystemEndpoint'

    UserInfo:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        description:
          type: string
        avatar:
          type: string
          format: uri
        email:
          type: string
          format: email
        validated:
          type: boolean
        validationEmail:
          type: string
          format: email
        validationDate:
          type: integer
          format: int64
        created:
          type: integer
          format: int64
        validationURI:
          type: string
        changePassword:
          type: boolean
        lastLogin:
          type: integer
          format: int64
        currentLoginURI:
          type: string
        lastPasswordChange:
          type: integer
          format: int64
        lastEmailCheck:
          type: integer
          format: int64
        currentPassword:
          type: string
        lastPasswords:
          type: array
          items:
            type: string
        waitingForEmailCheck:
          type: boolean
        notes:
          type: array
          items:
            $ref: '#/components/schemas/NoteInfo'
        location:
          type: string
          format: uuid
        owner:
          type: string
          format: uuid
        suspended:
          type: boolean
        blackListed:
          type: boolean
        locale:
          type: string
        userRole:
          type: string
          enum:
            - root
            - admin
            - sub
            - csr
            - system
            - special
        oauthType:
          type: string
          enum:
            - internal
            - normal
            - gmail
            - facebook
            - linkedin
            - instagram
        oauthUserInfo:
          type: string
        securityPolicy:
          type: string
        securityPolicyChange:
          type: integer
          format: int64

    UserList:
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserInfo'


    #########################################################################################
    ##
    ## These are endpoints that all services in the uCentral stack must provide
    ##
    #########################################################################################
    AnyPayload:
      type: object
      properties:
        Document:
          type: string

    StringList:
      type: object
      properties:
        list:
          type: array
          items:
            type: string

    TagValuePair:
      type: object
      properties:
        tag:
          type: string
        value:
          type: string

    TagValuePairList:
      type: object
      properties:
        tagList:
          type: array
          items:
            $ref: '#/components/schemas/TagValuePair'

    NoteInfo:
      type: object
      properties:
        created:
          type: integer
          format: int64
        createdBy:
          type: string
        note:
          type: string

    SystemCommandDetails:
      type: object
      properties:
        command:
          type: string
          enum:
            - setloglevels
            - getloglevels
            - getSubSystemNames
            - getLogLevelNames
            - stats
        parameters:
          oneOf:
            - $ref: '#/components/schemas/StringList'
            - $ref: '#/components/schemas/TagValuePairList'

    SystemCommandResults:
      type: object
      oneOf:
        - $ref: '#/components/schemas/StringList'
        - $ref: '#/components/schemas/TagValuePairList'

    ProfileAction:
      type: object
      properties:
        resource:
          type: string
        access:
          type: string
          enum:
            - NONE
            - READ
            - MODIFY
            - DELETE
            - CREATE
            - TEST
            - MOVE

    SecurityProfile:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        policy:
          type: array
          items:
            $ref: '#/components/schemas/ProfileAction'
        role:
          type: string
        notes:
          type: array
          items:
            $ref: '#/components/schemas/NoteInfo'

    SecurityProfileList:
      type: object
      properties:
        profiles:
          type: array
          items:
            $ref: '#/components/schemas/SecurityProfile'

    InternalServiceInfo:
      type: object
      properties:
        privateURI:
          type: string
        publicURI:
          type: string
        token:
          type: string

    InternalSystemServices:
      type: object
      properties:
        key:
          type: string
        version:
          type: integer
        services:
          type: array
          items:
            $ref: '#/components/schemas/InternalServiceInfo'

    TokenValidationResult:
      type: object
      properties:
        userInfo:
          $ref: '#/components/schemas/UserInfo'
        tokenInfo:
          $ref: '#/components/schemas/WebTokenResult'
    #########################################################################################
    ##
    ## End of uCentral system wide values
    ##
    #########################################################################################

paths:
  /oauth2:
    post:
      tags:
        - Authentication
      summary: Get access token - to be used as Bearer token header for all other API requests.
      operationId: getAccessToken
      parameters:
        - in: query
          name: newPassword
          description: used when a user is trying to change her password. This will be the new password.
          schema:
            type: string
          required: false
        -in: query
          name: forgotPassword
          description: A user forgot her password. She needs to present her e-mail address in the userId and set this to true
          schema:
            type: boolean
          required: false
      requestBody:
        description: User id and password
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WebTokenRequest'
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WebTokenResult'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /oauth2/{token}:
    delete:
      tags:
        - Authentication
      summary: Revoke a token.
      operationId: removeAccessToken
      parameters:
        - in: path
          name: token
          schema:
            type:
              string
          required: true
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/responses/Success'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /systemEndpoints:
    get:
      tags:
        - Authentication
      summary: retrieve the system layout
      operationId: getSystemInfo
      responses:
        200:
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemEndpointList'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /users:
    get:
      tags:
        - User Management
      summary: Retrieve a list of existing users as well as some information about them.
      operationId: getUsers
      parameters:
        - in: query
          name: offset
          schema:
            type: integer
            format: int64
          required: false
        - in: query
          name: limit
          schema:
            type: integer
            format: int64
          required: false
        - in: query
          description: Selecting this option means the newest record will be returned. Use limit to select how many.
          name: filter
          schema:
            type: string
          required: false
      responses:
        200:
          $ref: '#/components/schemas/UserList'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /user/{id}:
    get:
      tags:
        - User Management
      operationId: getUser
      summary: Retrieve the information for a single user
      parameters:
        - in: path
          name: id
          schema:
            type: string
            format: uuid
          required: true
      responses:
        200:
          $ref: '#/components/schemas/UserInfo'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    delete:
      tags:
        - User Management
      operationId: deleteUser
      summary: Delete s single user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
      responses:
        200:
          $ref: '#/components/responses/Success'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    post:
      tags:
        - User Management
      operationId: createUser
      summary: Create a single user
      parameters:
        - in: path
          name: id
          #must be set to 0 for user creation
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        description: User details (some fields are ignored during creation)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
      responses:
        200:
          $ref: '#/components/schemas/UserInfo'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

    put:
      tags:
        - User Management
      operationId: updateUser
      summary: Modifying a single user
      parameters:
        - in: path
          name: id
          schema:
            type: integer
            format: int64
          required: true
      requestBody:
        description: User details (some fields are ignored during update)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserInfo'
      responses:
        200:
          $ref: '#/components/schemas/UserInfo'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'


  #########################################################################################
  ##
  ## These are endpoints that all services in the uCentral stack must provide
  ##
  #########################################################################################

  /system:
    post:
      tags:
        - System Commands
      summary: Perform some systeme wide commands
      operationId: systemCommand
      requestBody:
        description: Command details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SystemCommandDetails'
      responses:
        200:
          description: Successfull command execution
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemCommandResults'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /callbackChannel:
    post:
      tags:
        - Callback
      summary: Generic callback hook
      operationId: postCallback
      parameters:
        - in: query
          name: subscribe
          schema:
            type: boolean
          required: false
        - in: query
          name: uri
          schema:
            type: string
            format: uri
        - in: query
          name: key
          schema:
            type: string
        - in: query
          name: topics
          schema:
            type: string
        - in: query
          name: id
          schema:
            type: string
        - in: query
          name: topic
          schema:
            type: string
      requestBody:
        description: A generic JSONDocument, may be empty too {}
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnyPayload'

      responses:
        200:
          $ref: '#/components/responses/Success'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /securityProfiles:
    get:
      tags:
        - Security
      summary: Retrieve the list of security profiles for a specific service type
      operationId: getSecurituProfiles
      parameters:
        - in: query
          description: Pagination start (starts at 1. If not specified, 1 is assumed)
          name: offset
          schema:
            type: integer
          required: false
        - in: query
          description: Maximum number of entries to return (if absent, no limit is assumed)
          name: limit
          schema:
            type: integer
          required: false
        - in: query
          description: Filter the results
          name: filter
          schema:
            type: string
          required: false
      responses:
        200:
          $ref: '#/components/schemas/SecurityProfileList'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  #########################################################################################
  ##  The following calls are restricted to the private system side APIs
  #########################################################################################
  /systemServices:
    get:
      tags:
        - Security
      summary: Retrieve the basic system information. This information is used between services only.
      operationId: getSystemServices
      responses:
        200:
          $ref: '#/components/schemas/InternalSystemServices'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'

  /validateToken:
    get:
      tags:
        - Security
      summary: Allows any microservice to validate a token and get security policy for a specific user.
      operationId: validateToken
      parameters:
        - in: query
          name: token
          schema:
            type: string
          required: true
      responses:
        200:
          $ref: '#/components/schemas/TokenValidationResult'
        403:
          $ref: '#/components/responses/Unauthorized'
        404:
          $ref: '#/components/responses/NotFound'


#########################################################################################
##
## These are endpoints that all services in the uCentral stack must provide
##
#########################################################################################
